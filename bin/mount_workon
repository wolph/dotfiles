#!/usr/bin/env zsh

VIRTUALENVWRAPPER_PYTHON=$(which python)

function command_exists(){
    type $1 2>/dev/null | grep -vq ' not found'
}

if command_exists poetry && -f pyproject.toml; then
    exec poetry shell
elif command_exists pyenv-virtualenv-init; then
    pyenv virtualenvwrapper
    eval "$(echo "original_workon() {"; declare -f workon | tail -n +2)"
elif ! command_exists original_workon && command_exists virtualenvwrapper_lazy.sh; then
    . $(which virtualenvwrapper_lazy.sh)
    eval "$(echo "original_workon() {"; declare -f workon | tail -n +2)"
fi

function mount_file(){
    dir="$1"
    image="$dir.sparseimage"

    if [ -d "$dir" ]; then
        empty=$(ls -A "$dir" | grep -v '^.autodiskmounted$')
        if [ -z "$empty" ]; then
            echo "Removing empty dir $dir"
            [ -f "$dir/.autodiskmounted" ] && rm "$dir/.autodiskmounted"
            rmdir "$dir"
        fi
    fi

    if [ -f "${image}.bz2" ]; then
        pbzip2 -dvv "${image}.bz2"
    fi

    if [ -f "$image" ] && [ ! -d "$dir" ]; then
        echo "Attaching $image to $dir"
        #hdiutil attach -mountroot $(dirname "$dir") "$image"
        hdiutil mount -mountpoint "$dir" "$image"
    fi
}

function unmount_file(){
    if [ -d "$1" ] && [ -f "$1.sparseimage*" ]; then
        echo "Unmounting $1"
        ~/bin/unmount_image "$1" &
    fi
}

function workon(){
    project_dir="${PROJECT_HOME}$1"
    env_dir="${WORKON_HOME}$1"
    mount_file "$project_dir"
    mount_file "$env_dir"
    if [ ! -d "$project_dir" ] && [ ! -d "$env_dir" ]; then
        mkproject "$1"
        cd "$project_dir"
    elif [ -d "$env_dir" ]; then
        original_workon "$1"
    else
        echo "No virtualenv $1, simply doing a cd to $project_dir"
        test -d "$project_dir" && cd "$project_dir"
    fi
}

function workoff(){
    # Make sure we don't block anything by changing directory
    cd

    project_dir="${PROJECT_HOME}$1"
    env_dir="${WORKON_HOME}$1"
    unmount_file "$project_dir"
    unmount_file "$env_dir"
}

