# vim: ft=zsh
#
# On OS X we have GNU Date as gdate, on normal operating systems it's just date
if ! type gdate > /dev/null; then
    alias gdate=date
fi

DEBUG=0
if [ 1 -eq "$DEBUG" ]; then
    zmodload zsh/zprof
    # set the trace prompt to include seconds, nanoseconds, script name and
    # line number
    zmodload zsh/datetime
    PS4='+$EPOCHREALTIME %N:%i> '
    # save file stderr to file descriptor 3 and redirect stderr (including
    # trace output) to a file with the script's PID as an extension
    logfile=/tmp/startlog.$$
    echo "Logging to $logfile"
    exec 3>&2 2>$logfile
    # set options to turn on tracing and expansion of commands contained in
    # the prompt
    setopt xtrace prompt_subst
fi

# Fixing OS X Path annoyances
# if [ -x /usr/libexec/path_helper ]; then
#     echo 'Removing the execute flag from the OS X path helper as it is broken'
#     sudo chmod ugo-x /usr/libexec/path_helper
# fi

if [ -x ~/bin/mount_workon ]; then
    export ROOT_DIR=~/
elif [ -x ./bin/mount_workon ]; then
    export ROOT_DIR=./
else;
    export ROOT_DIR=~rick/
fi

# if [ "$TERM" = "xterm" ]; then
#     export TERM=xterm-256color
# fi

if [ -n "$SSH_AUTH_SOCK" ] && [ "$SSH_AUTH_SOCK" != ~/.ssh/auth_sock ] && [ -z "$TMUX" ]; then
    ln -sf "$SSH_AUTH_SOCK" ~/.ssh/auth_sock && export SSH_AUTH_SOCK=~/.ssh/auth_sock
fi

function command_exists(){
    type $1 2>/dev/null | grep -vq ' not found'
}

ticfile="$TERM.ti"
if command_exists tic && [ -f "$ticfile" ]; then
    tic "$ticfile"
fi


# Tool to check the timing of the config file, handy for debugging
T=0
t(){
    T="$(gdate +%s%N)"
}
t
td(){
    # Time delta
    TD="$(($(gdate +%s%N)-T))"
    # Milliseconds
    M="$((TD/1000000))"
    echo -n "Time in milliseconds: ${M}"

    if [ 0 = "$#" ]; then
        echo
    else
        echo " for $@"
    fi
    t
}

# Load some default modules
setopt extendedglob
zmodload -a colors
zmodload -a autocomplete
zmodload -a complist
# autoload -U colors && colors

if [[ "$OSTYPE" == 'darwin'* ]]; then
    [ -z "$LANG" ] && export LANG=en_US.UTF-8
else
    [ -z "$LANG" ] && export LANG=C.UTF-8
    [ -z "$LANGUAGE" ] && export LANGUAGE=C.UTF-8
    [ -z "$LC_ALL" ] && export LC_ALL=C.UTF-8
fi
export TZ=Europe/Amsterdam

# Adding my own completion functions
fpath=(/usr/local/share/zsh-completions $fpath)
fpath=(/usr/local/share/zsh/site-functions/ $fpath)
fpath=(${ROOT_DIR}.zsh/zsh-completions/src $fpath)
fpath=(${ROOT_DIR}.zsh/site-functions $fpath)

# # Antigen bundles
# . ${ROOT_DIR}.antigen.zsh
# antigen bundle WoLpH/zsh-completions src
# antigen bundle git
# antigen bundle svn
# antigen bundle python
# antigen bundle pip
# antigen bundle extract
# antigen bundle sharat87/zsh-vim-mode
# antigen bundle kennethreitz/autoenv
# antigen apply

# $PATH changes are done in .zprofile
export PATH="$PATH:~/bin:${ROOT_DIR}bin"

# Prompts
#export PS1="$(print '%{\e[0;91m%}%n%{\e[0m%}')$(print '%{\e[0;94m%}@%{\e[0m%}')$(print '%{\e[0;92m%}%m%{\e[0m%}')# "
export PS1="$(print '%{\e[38;5;208m%}%n%{\e[0m%}')$(print '%{\e[38;5;33m%}@%{\e[0m%}')$(print '%{\e[38;5;10m%}%m%{\e[0m%}')# "
export ORIGINAL_PS1="$PS1"
export RPS1='%~'
export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)

# esptool settings
ESPTOOL_BAUD=921600

# Declare the variable
typeset -A ZSH_HIGHLIGHT_STYLES

# # To differentiate aliases from other command types
# ZSH_HIGHLIGHT_STYLES[alias]='fg=magenta,bold'
# 
# # To have paths colored instead of underlined
# ZSH_HIGHLIGHT_STYLES[path]='fg=cyan'

# To disable highlighting of globbing expressions
ZSH_HIGHLIGHT_STYLES[globbing]='fg=cyan'

# Show the vim mode
# function zle-line-init zle-keymap-select {
#     RPS1="%~ ${${KEYMAP/vicmd/[NORMAL]}/(main|viins)/[INSERT]} $EPS1"
#     zle reset-prompt
# }
# zle -N zle-line-init
# zle -N zle-keymap-select

# Enable Jedi within the normal Python interpreter
export PYTHONSTARTUP="$HOME/.pythonrc.py"
export PIP_DISABLE_PIP_VERSION_CHECK=1
export PIPENV_VENV_IN_PROJECT=true

# Set the java home
test -x /usr/libexec/java_home && export JAVA_HOME=$(/usr/libexec/java_home)

# if we're on ec2, set the hostname to the cluster setting if available
EC2=0
if [ $(hostname | grep -E '^ip-10-') ]; then
    host=$(curl --silent http://169.254.169.254/latest/user-data/ | python -mjson.tool | grep cluster | sed 's/.*: *"\([^"]*\)".*/\1/g')
    if [ "$host" ]; then
        HOST=$host
        EC2=1
    fi
fi

zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}' 'l:|=* r:|=*' 'r:|[._-]=** r:|=**'
zstyle ':completion:*' max-errors 2
zstyle :compinstall filename '~/.zshrc'

# Allow local X access, seems to be needed for OSX to work with X properly...
#if [ -x /usr/bin/xhost ] && [ -n "$DISPLAY" ]; then
#    xhost +$(hostname -s) > /dev/null
#    xhost +$(hostname -f) > /dev/null
#fi

# if [ -x ${ROOT_DIR}bin/start_supervisord ]; then
#     sudo ${ROOT_DIR}bin/start_supervisord
# fi


SSH_KEYS=(~/.ssh/id_rsa ~/.ssh/id_dsa)

if command_exists ssh-agent && [ -z "$SSH_AUTH_SOCK" ]; then
    eval $(ssh-agent) > /dev/null
fi

# Enable keychain or ssh-add
if [ -z "$SSH_AUTH_SOCK" ]; then
    if command_exists keychain; then
        eval $(keychain --ignore-missing -Q -q --eval $SSH_KEYS)
    elif command_exists ssh-add; then
        for key in $SSH_KEYS; do
            if [ -f "$key" ]; then
                if [[ "$OSTYPE" =~ '^(darwin)' ]]; then
	                ssh-add -q -A -K $key
	            else
                    ssh-add -q $key
	            fi
            fi
        done
    fi
fi

# Some convenient aliases
# Enable spellcheck/autocorrect?
# setopt correct
# export SPROMPT="Correct $fg[red]%R$reset_color to $fg[green]%r?$reset_color (Yes, No, Abort, Edit) "

alias mv='nocorrect mv'       # no spelling correction on mv
alias cp='nocorrect cp'       # no spelling correction on cp
alias mkdir='nocorrect mkdir' # no spelling correction on mkdir
alias less='/usr/bin/less -R'

if [[ "$OSTYPE" =~ '^freebsd' ]]; then
    export LS_OPTIONS='-G'
elif [[ "$OSTYPE" =~ '^darwin' ]]; then
    export LS_OPTIONS='--color'
    alias vlc='open -a vlc'
else
    export LS_OPTIONS='--color=auto'
fi

alias ls="ls $LS_OPTIONS"
alias l='ls -A'
alias ll='l -l'
alias qmv='qmv -f do'
alias push='git pull; git push'
export GIT_MERGE_AUTOEDIT=no
export HOMEBREW_CASK_OPTS=--no-quarantine

# Some people might not like this but I find it convenient. It makes find
# search in symlinks by default
# alias find='find -L'
alias grep='grep --color=auto --directories=skip'
command_exists hub && alias git=hub

# Link vim to the OS X clipboard
if command_exists nvim; then
    alias vim="safe-reattach-to-user-namespace nvim"
    alias vimdiff="safe-reattach-to-user-namespace nvim -d"
    alias view="safe-reattach-to-user-namespace nvim -R"
    export EDITOR=nvim
else
    alias vim="safe-reattach-to-user-namespace vim"
    alias vimdiff="safe-reattach-to-user-namespace vimdiff"
    export EDITOR=vim
fi

alias vi='vim'
alias parallel='parallel --no-notice'
alias feh='/usr/local/bin/feh --auto-zoom --draw-filename --fullscreen --recursive'
alias montage='feh --montage --thumb-height 256 --thumb-width 256 --limit-width 2560'
alias tb='nc termbin.com 9999'
alias isodate='date -u +"%Y-%m-%dT%H:%M:%S"'
alias ssh-copy-id='ssh-copy-id -o ControlPath=none'
#alias mplayer='open -a MplayerX.App --args '

# Little trick to change the name of the shell
# . ${ROOT_DIR}bin/iterm2_helpers

# moved to bin/title
# function title(){
#     if [ "$1" != "default" ]; then
#         echo -ne "\033]0;$1\007"
#         printf "\033k$1\033\\"
#     fi
# }

function mosh(){
    if [ -n "$1" ]; then
        title "$1"
    fi
    /usr/local/bin/mosh $@
    title ""
}

# Little trick to change the name of the shell
function ssh(){
    if [[ "$@" =~ "BatchMode" ]]; then
        /usr/bin/ssh $*
    else
        if [ -n "$1" ]; then
            title "$*"
        fi
        /usr/bin/ssh $*
        title ""
    fi
}


function autossh(){
    if [ -n "$1" ]; then
        title "$1"
    fi
    monitor_port=$((RANDOM % (65000 - 20000) + 20000))
    exec /usr/local/bin/autossh -o ControlMaster=no -M $monitor_port $*
    title ""
}

# Little function to go to a random directory, handy if you have a lot of
# stuff to sort out and don't know where to start ;)
torandomdir(){
    files=(*(/))
    dir=("${files[RANDOM%${#files[@]}]}")
    cd "$dir"
}

torandomparentdir(){
    cd ..
    echo "$PWD"
    torandomdir
}

# ec2 utils
ec2ssh(){
    host=$(echo $@ | sed 's/.*://')
    label=$(echo $@ | sed 's/:.*//')
    echo "Connecting to $label ($host)"
    ssh-keygen -f "$HOME/.ssh/known_hosts" -R "$host"
    rsync -av ~/.ec2_skel/ $host:~/
    ssh -t $host exec zsh
}

update_ec2(){
    "$HOME/.ec2/list_instances.py"
}

_ec2ssh(){
    reply=(`cat ~/.ec2/instances`)
}
compctl -K _ec2ssh ec2ssh

alias s='sudo -i zsh'
# s(){
#     sudo su -m $@ -c 'exec zsh'
# }

# Virtualenvwrapper stuff
export WORKON_HOME="${HOME}/envs/"
export PROJECT_HOME="${HOME}/workspace/"
export POETRY_VIRTUALENVS_PATH="$WORKON_HOME"
#export DISPLAY=:0

export VIRTUALENVWRAPPER_PYTHON=python3

# if which pyenv &> /dev/null; then
#     eval "$(pyenv init -)";
# 	export PATH="/Users/rick/.pyenv/shims:${PATH}"
# 	export PYENV_SHELL=zsh
# 	[ -x /usr/local/Cellar/pyenv/ ] && source /usr/local/Cellar/pyenv/*/libexec/../completions/pyenv.zsh
# 	# command pyenv rehash 2>/dev/null
# 	pyenv() {
#   	local command
#   	command="${1:-}"
#   	if [ "$#" -gt 0 ]; then
#     	shift
#   	fi
# 
#   	case "$command" in
#   	activate|deactivate|rehash|shell|virtualenvwrapper|virtualenvwrapper_lazy)
#     	eval "$(pyenv "sh-$command" "$@")";;
#   	*)
#     	command pyenv "$command" "$@";;
#   	esac
# 	}
# 
# 	pyenv virtualenvwrapper_lazy
# elif which virtualenvwrapper.sh &> /dev/null; then
#     . $(which virtualenvwrapper.sh)
# fi

# if [ -x "/usr/local/bin/virtualenvwrapper_lazy.sh" ]; then
#     . /usr/local/bin/virtualenvwrapper_lazy.sh
if [ -x "/usr/local/bin/virtualenvwrapper.sh" ]; then
    . /usr/local/bin/virtualenvwrapper.sh
elif which virtualenvwrapper.sh &> /dev/null; then
    # . $(which virtualenvwrapper.sh)
elif [ -f /usr/share/virtualenvwrapper/virtualenvwrapper.sh ]; then
    . /usr/share/virtualenvwrapper/virtualenvwrapper.sh
fi

# else
#     . $(which virtualenvwrapper.sh)
#     # if ! command_exists original_workon; then
#     #     eval "$(echo "original_workon() {"; declare -f workon | tail -n +2)"
#     # fi
# 
#     # # No need for mount_workon anymore, perhaps in the future
#     # # . ${ROOT_DIR}bin/mount_workon
#     # workon(){
#     #     project_dir="${PROJECT_HOME}$1"
#     #     env_dir="${WORKON_HOME}$1"
#     #     if [ ! -d "$project_dir" ] && [ ! -d "$env_dir" ]; then
#     #         mkproject "$1"
#     #         cd "$project_dir"
#     #     elif [ -d "$env_dir" ]; then
#     #         original_workon "$1"
#     #     else
#     #         echo "No virtualenv $1, simply doing a cd to $project_dir"
#     #         test -d "$project_dir" && cd "$project_dir"
#     #     fi
#     # }
# fi
#
#
activate_venv(){
    if [ -n "$VIRTUAL_ENV" ]; then
        return false
    fi

    activate_file="$WORKON_HOME/${1}/bin/activate"
    if [ -e "$activate_file" ]; then
        . "$activate_file"
        return true
    fi

    activate_file="./env/bin/activate"
    if [ -e "$activate_file" ]; then
        . "$activate_file"
        return true
    fi

    activate_file="./.env/bin/activate"
    if [ -e "$activate_file" ]; then
        . "$activate_file"
        return true
    fi

    if [ -e "pyproject.yaml" ]; then
        poetry shell
        return true
    fi
}

_workon_if_possible(){
    if [ "$1" = '/' ] || [ "$1" = 'root' ]; then
        return false;
    fi

    if [ -e "$WORKON_HOME/$1" ] || [ -e "$WORKON_HOME/$1.sparseimage*" ]; then
        echo "Working on ~/envs/$1"
        activate_venv "$1"
        _virtualenv_tmux_name
        return true
    fi
    return false
}

_virtualenv_tmux_name(){
    if [ -n "$TMUX" ] && [ -z "$VIRTUAL_ENV" ]; then
        session_name=${VIRTUAL_ENV%%/.venv}
        session_name=${session_name##.*/}
        echo "session name: $session_name"
        export PS1="($session_name)$ORIGINAL_PS1"
        echo -ne "\e]0;$session_name\a"
    fi
}

# Auto active virtualenv for the current directory
activate(){
    if [ -e ".venv/bin/activate" ]; then
        echo "Activating pipenv in $PWD/.venv"
# . .venv/bin/activate  # commented out by conda initialize
        _virtualenv_tmux_name

        # the pipenv shell normally enables these as well
        export PYTHONDONTWRITEBYTECODE=1
        export PIPENV_ACTIVE=1

    elif [ -e "activate" ]; then
        echo "Activating using $PWD/activate"
        . ./activate
        _virtualenv_tmux_name
    else
        # activate if our current dir or our parent dir is the name of a
        # virtualenv
        _workon_if_possible $(basename "$PWD")
        _workon_if_possible $(basename $(dirname "$(pwd)"))
    fi

    if [ -f "${VIRTUAL_ENV}/.project" ]; then
        cd $(cat "${VIRTUAL_ENV}/.project")
    fi
}

# activate virtualenv automatically
if [[ -z "$VIRTUAL_ENV" || -n "$TMUX" ]]; then
    activate
fi

# # reset all bindkeys, this makes vi mode work _much_ faster
# bindkey -rpM viins '\e'

# Vim mode
bindkey -v

export KEYTIMEOUT=1

#Rebind HOME and END to do the decent thing:
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line
bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word
case $TERM in (xterm*)
	bindkey '\eOH' beginning-of-line
	bindkey '\eOF' end-of-line
esac

autoload -U edit-command-line
zle -N edit-command-line
bindkey '^E' edit-command-line

#And DEL too, as well as PGDN and insert:
bindkey '^[[3~' delete-char
bindkey '^[[6~' end-of-history
#bindkey '\e[2~' redisplay

#Now bind pgup to paste the last word of the last command,
bindkey '\e[5~' insert-last-word

# History search should use patterns on 5.x and normal search on 4.x or lower
if [[ "$ZSH_VERSION" < 5 ]]; then
    bindkey '^R' history-incremental-search-backward
    bindkey '^S' history-incremental-search-forward
    bindkey '^Xr' history-incremental-search-backward
    bindkey '^Xs' history-incremental-search-forward
else
    bindkey '^R' history-incremental-pattern-search-backward
    bindkey '^S' history-incremental-pattern-search-forward
    bindkey '^Xr' history-incremental-pattern-search-backward
    bindkey '^Xs' history-incremental-pattern-search-forward
fi

bindkey '^[[A' up-line-or-history
bindkey '^[[B' down-line-or-history
bindkey '^[[C' forward-char
bindkey '^[[D' backward-char

# Color listing
# Generated by: vivid generate snazzy
# preview themes with:
# for i in $(vivid themes); do echo $i; export LS_COLORS=$(vivid generate $i); ls; echo; done
export LS_COLORS='*~=0;38;2;102;102;102:pi=0;38;2;0;0;0;48;2;87;199;255:cd=0;38;2;255;106;193;48;2;51;51;51:mi=0;38;2;0;0;0;48;2;255;92;87:di=0;38;2;87;199;255:bd=0;38;2;154;237;254;48;2;51;51;51:so=0;38;2;0;0;0;48;2;255;106;193:tw=0:ow=0:ln=0;38;2;255;106;193:no=0:ex=1;38;2;255;92;87:or=0;38;2;0;0;0;48;2;255;92;87:st=0:fi=0:*.a=1;38;2;255;92;87:*.o=0;38;2;102;102;102:*.m=0;38;2;90;247;142:*.p=0;38;2;90;247;142:*.d=0;38;2;90;247;142:*.c=0;38;2;90;247;142:*.z=4;38;2;154;237;254:*.h=0;38;2;90;247;142:*.t=0;38;2;90;247;142:*.r=0;38;2;90;247;142:*.vb=0;38;2;90;247;142:*.ex=0;38;2;90;247;142:*.jl=0;38;2;90;247;142:*.rs=0;38;2;90;247;142:*.hi=0;38;2;102;102;102:*.rb=0;38;2;90;247;142:*.ll=0;38;2;90;247;142:*.nb=0;38;2;90;247;142:*.bc=0;38;2;102;102;102:*.js=0;38;2;90;247;142:*.di=0;38;2;90;247;142:*.py=0;38;2;90;247;142:*.el=0;38;2;90;247;142:*.pl=0;38;2;90;247;142:*.pm=0;38;2;90;247;142:*.hs=0;38;2;90;247;142:*.ts=0;38;2;90;247;142:*.pp=0;38;2;90;247;142:*.go=0;38;2;90;247;142:*.as=0;38;2;90;247;142:*.so=1;38;2;255;92;87:*.xz=4;38;2;154;237;254:*.rm=0;38;2;255;180;223:*.gv=0;38;2;90;247;142:*.ps=0;38;2;255;92;87:*.bz=4;38;2;154;237;254:*.md=0;38;2;243;249;157:*.ml=0;38;2;90;247;142:*.fs=0;38;2;90;247;142:*.ui=0;38;2;243;249;157:*.lo=0;38;2;102;102;102:*.cs=0;38;2;90;247;142:*.la=0;38;2;102;102;102:*.ko=1;38;2;255;92;87:*.7z=4;38;2;154;237;254:*.gz=4;38;2;154;237;254:*.cp=0;38;2;90;247;142:*css=0;38;2;90;247;142:*.sh=0;38;2;90;247;142:*.cr=0;38;2;90;247;142:*.mn=0;38;2;90;247;142:*.td=0;38;2;90;247;142:*.hh=0;38;2;90;247;142:*.cc=0;38;2;90;247;142:*.kt=0;38;2;90;247;142:*.kex=0;38;2;255;92;87:*.ini=0;38;2;243;249;157:*.apk=4;38;2;154;237;254:*.dll=1;38;2;255;92;87:*.c++=0;38;2;90;247;142:*.ind=0;38;2;102;102;102:*.pyc=0;38;2;102;102;102:*.flv=0;38;2;255;180;223:*.ilg=0;38;2;102;102;102:*.pro=0;38;2;165;255;195:*.pps=0;38;2;255;92;87:*.lua=0;38;2;90;247;142:*.cgi=0;38;2;90;247;142:*.mov=0;38;2;255;180;223:*.zsh=0;38;2;90;247;142:*.ipp=0;38;2;90;247;142:*.svg=0;38;2;255;180;223:*.xlr=0;38;2;255;92;87:*hgrc=0;38;2;165;255;195:*.vim=0;38;2;90;247;142:*.tex=0;38;2;90;247;142:*TODO=1:*.bat=1;38;2;255;92;87:*.exe=1;38;2;255;92;87:*.txt=0;38;2;243;249;157:*.htm=0;38;2;243;249;157:*.fon=0;38;2;255;180;223:*.iso=4;38;2;154;237;254:*.ppm=0;38;2;255;180;223:*.zst=4;38;2;154;237;254:*.awk=0;38;2;90;247;142:*.rst=0;38;2;243;249;157:*.tsx=0;38;2;90;247;142:*.mpg=0;38;2;255;180;223:*.tif=0;38;2;255;180;223:*.bmp=0;38;2;255;180;223:*.mid=0;38;2;255;180;223:*.bcf=0;38;2;102;102;102:*.tgz=4;38;2;154;237;254:*.otf=0;38;2;255;180;223:*.gvy=0;38;2;90;247;142:*.bin=4;38;2;154;237;254:*.mp4=0;38;2;255;180;223:*.csv=0;38;2;243;249;157:*.clj=0;38;2;90;247;142:*.bib=0;38;2;243;249;157:*.mkv=0;38;2;255;180;223:*.pkg=4;38;2;154;237;254:*.pod=0;38;2;90;247;142:*.vcd=4;38;2;154;237;254:*.epp=0;38;2;90;247;142:*.toc=0;38;2;102;102;102:*.ogg=0;38;2;255;180;223:*.tcl=0;38;2;90;247;142:*.xmp=0;38;2;243;249;157:*.tmp=0;38;2;102;102;102:*.aif=0;38;2;255;180;223:*.pdf=0;38;2;255;92;87:*.img=4;38;2;154;237;254:*.sql=0;38;2;90;247;142:*.rar=4;38;2;154;237;254:*.ods=0;38;2;255;92;87:*.mp3=0;38;2;255;180;223:*.nix=0;38;2;243;249;157:*.cfg=0;38;2;243;249;157:*.ttf=0;38;2;255;180;223:*.php=0;38;2;90;247;142:*.fls=0;38;2;102;102;102:*.arj=4;38;2;154;237;254:*.bz2=4;38;2;154;237;254:*.psd=0;38;2;255;180;223:*.m4v=0;38;2;255;180;223:*.wav=0;38;2;255;180;223:*.ltx=0;38;2;90;247;142:*.ico=0;38;2;255;180;223:*.erl=0;38;2;90;247;142:*.pas=0;38;2;90;247;142:*.asa=0;38;2;90;247;142:*.xcf=0;38;2;255;180;223:*.bbl=0;38;2;102;102;102:*.tml=0;38;2;243;249;157:*.rtf=0;38;2;255;92;87:*.swf=0;38;2;255;180;223:*.dot=0;38;2;90;247;142:*.pbm=0;38;2;255;180;223:*.odt=0;38;2;255;92;87:*.wma=0;38;2;255;180;223:*.jpg=0;38;2;255;180;223:*.csx=0;38;2;90;247;142:*.deb=4;38;2;154;237;254:*.out=0;38;2;102;102;102:*.inc=0;38;2;90;247;142:*.kts=0;38;2;90;247;142:*.fnt=0;38;2;255;180;223:*.m4a=0;38;2;255;180;223:*.yml=0;38;2;243;249;157:*.pgm=0;38;2;255;180;223:*.jar=4;38;2;154;237;254:*.ppt=0;38;2;255;92;87:*.bak=0;38;2;102;102;102:*.cxx=0;38;2;90;247;142:*.dox=0;38;2;165;255;195:*.fsi=0;38;2;90;247;142:*.sxi=0;38;2;255;92;87:*.git=0;38;2;102;102;102:*.h++=0;38;2;90;247;142:*.bsh=0;38;2;90;247;142:*.sty=0;38;2;102;102;102:*.com=1;38;2;255;92;87:*.htc=0;38;2;90;247;142:*.bag=4;38;2;154;237;254:*.tbz=4;38;2;154;237;254:*.zip=4;38;2;154;237;254:*.swp=0;38;2;102;102;102:*.exs=0;38;2;90;247;142:*.ps1=0;38;2;90;247;142:*.hpp=0;38;2;90;247;142:*.tar=4;38;2;154;237;254:*.dmg=4;38;2;154;237;254:*.cpp=0;38;2;90;247;142:*.avi=0;38;2;255;180;223:*.odp=0;38;2;255;92;87:*.mir=0;38;2;90;247;142:*.vob=0;38;2;255;180;223:*.idx=0;38;2;102;102;102:*.bst=0;38;2;243;249;157:*.png=0;38;2;255;180;223:*.sxw=0;38;2;255;92;87:*.elm=0;38;2;90;247;142:*.gif=0;38;2;255;180;223:*.xml=0;38;2;243;249;157:*.def=0;38;2;90;247;142:*.sbt=0;38;2;90;247;142:*.xls=0;38;2;255;92;87:*.dpr=0;38;2;90;247;142:*.inl=0;38;2;90;247;142:*.blg=0;38;2;102;102;102:*.log=0;38;2;102;102;102:*.fsx=0;38;2;90;247;142:*.pid=0;38;2;102;102;102:*.mli=0;38;2;90;247;142:*.wmv=0;38;2;255;180;223:*.ics=0;38;2;255;92;87:*.hxx=0;38;2;90;247;142:*.eps=0;38;2;255;180;223:*.aux=0;38;2;102;102;102:*.doc=0;38;2;255;92;87:*.rpm=4;38;2;154;237;254:*.psd1=0;38;2;90;247;142:*.toml=0;38;2;243;249;157:*.psm1=0;38;2;90;247;142:*.diff=0;38;2;90;247;142:*.java=0;38;2;90;247;142:*.yaml=0;38;2;243;249;157:*.orig=0;38;2;102;102;102:*.purs=0;38;2;90;247;142:*.pptx=0;38;2;255;92;87:*.tbz2=4;38;2;154;237;254:*.dart=0;38;2;90;247;142:*.json=0;38;2;243;249;157:*.rlib=0;38;2;102;102;102:*.conf=0;38;2;243;249;157:*.flac=0;38;2;255;180;223:*.bash=0;38;2;90;247;142:*.less=0;38;2;90;247;142:*.make=0;38;2;165;255;195:*.mpeg=0;38;2;255;180;223:*.tiff=0;38;2;255;180;223:*.xlsx=0;38;2;255;92;87:*.html=0;38;2;243;249;157:*.h264=0;38;2;255;180;223:*.docx=0;38;2;255;92;87:*.epub=0;38;2;255;92;87:*.jpeg=0;38;2;255;180;223:*.lock=0;38;2;102;102;102:*.fish=0;38;2;90;247;142:*.hgrc=0;38;2;165;255;195:*.lisp=0;38;2;90;247;142:*.patch=0;38;2;90;247;142:*.cache=0;38;2;102;102;102:*.swift=0;38;2;90;247;142:*.cmake=0;38;2;165;255;195:*passwd=0;38;2;243;249;157:*.ipynb=0;38;2;90;247;142:*README=0;38;2;40;42;54;48;2;243;249;157:*.mdown=0;38;2;243;249;157:*.dyn_o=0;38;2;102;102;102:*.scala=0;38;2;90;247;142:*.cabal=0;38;2;90;247;142:*.class=0;38;2;102;102;102:*.toast=4;38;2;154;237;254:*.shtml=0;38;2;243;249;157:*shadow=0;38;2;243;249;157:*.xhtml=0;38;2;243;249;157:*.ignore=0;38;2;165;255;195:*.gradle=0;38;2;90;247;142:*TODO.md=1:*.groovy=0;38;2;90;247;142:*.dyn_hi=0;38;2;102;102;102:*.config=0;38;2;243;249;157:*LICENSE=0;38;2;153;153;153:*COPYING=0;38;2;153;153;153:*INSTALL=0;38;2;40;42;54;48;2;243;249;157:*.matlab=0;38;2;90;247;142:*.flake8=0;38;2;165;255;195:*.gemspec=0;38;2;165;255;195:*setup.py=0;38;2;165;255;195:*Makefile=0;38;2;165;255;195:*Doxyfile=0;38;2;165;255;195:*.desktop=0;38;2;243;249;157:*TODO.txt=1:*.markdown=0;38;2;243;249;157:*README.md=0;38;2;40;42;54;48;2;243;249;157:*.fdignore=0;38;2;165;255;195:*.DS_Store=0;38;2;102;102;102:*COPYRIGHT=0;38;2;153;153;153:*.kdevelop=0;38;2;165;255;195:*.rgignore=0;38;2;165;255;195:*.cmake.in=0;38;2;165;255;195:*configure=0;38;2;165;255;195:*SConscript=0;38;2;165;255;195:*.gitconfig=0;38;2;165;255;195:*Dockerfile=0;38;2;243;249;157:*.localized=0;38;2;102;102;102:*README.txt=0;38;2;40;42;54;48;2;243;249;157:*CODEOWNERS=0;38;2;165;255;195:*.scons_opt=0;38;2;102;102;102:*.gitignore=0;38;2;165;255;195:*SConstruct=0;38;2;165;255;195:*INSTALL.md=0;38;2;40;42;54;48;2;243;249;157:*MANIFEST.in=0;38;2;165;255;195:*INSTALL.txt=0;38;2;40;42;54;48;2;243;249;157:*.synctex.gz=0;38;2;102;102;102:*LICENSE-MIT=0;38;2;153;153;153:*Makefile.am=0;38;2;165;255;195:*.gitmodules=0;38;2;165;255;195:*.travis.yml=0;38;2;90;247;142:*Makefile.in=0;38;2;102;102;102:*.applescript=0;38;2;90;247;142:*CONTRIBUTORS=0;38;2;40;42;54;48;2;243;249;157:*appveyor.yml=0;38;2;90;247;142:*configure.ac=0;38;2;165;255;195:*.fdb_latexmk=0;38;2;102;102;102:*.clang-format=0;38;2;165;255;195:*CMakeCache.txt=0;38;2;102;102;102:*LICENSE-APACHE=0;38;2;153;153;153:*CMakeLists.txt=0;38;2;165;255;195:*.gitattributes=0;38;2;165;255;195:*CONTRIBUTORS.md=0;38;2;40;42;54;48;2;243;249;157:*requirements.txt=0;38;2;165;255;195:*CONTRIBUTORS.txt=0;38;2;40;42;54;48;2;243;249;157:*.sconsign.dblite=0;38;2;102;102;102:*package-lock.json=0;38;2;102;102;102:*.CFUserTextEncoding=0;38;2;102;102;102'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
export CLICOLOR=true
export LSCOLORS=Exfxcxdxbxegedabagacad

zstyle ':completion:*' list-colors 'reply=( "=(#b)(*$VAR)(?)*=00=$color[green]=$color[bg-green]" )'
zstyle ':completion:*:*:tmx:*:active-sessions' list-colors '=*=228;0'

# history settings
HISTSIZE=10000000
SAVEHIST=10000000

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.


if [ -f "$PWD/.zshhistory" ]; then
    export HISTFILE="$PWD/.zshhistory"
else
    export HISTFILE=~/.zshhistory
fi

# The maximum amount of search results to show in autocompletion
LISTMAX=250

# use /etc/hosts and known_hosts for hostname completion
[ -r /etc/ssh/ssh_known_hosts ] && _global_ssh_hosts=(${${${${(f)"$(</etc/ssh/ssh_known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
[ -r ~/.ssh/known_hosts ] && _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
[ -r /etc/hosts ] && : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || _etc_hosts=()
# [ -r ~/.ssh/config ] && _ssh_config_hosts=(${(s: :)${(ps:\t:)${(f)"$(<$HOME/.ssh/config|grep 'Host' | grep -v '\*')"}#Host}#Hostname}) || _ssh_config_hosts=()

hosts=(
  "$_global_ssh_hosts[@]"
  "$_ssh_hosts[@]"
  "$_etc_hosts[@]"
  "$_ssh_config_hosts[@]"
  "$HOST"
  localhost
)

_zpcompinit_custom() {
  setopt extendedglob local_options
  autoload -Uz compinit
  local zcd=${ZDOTDIR:-$HOME}/.zcompdump
  local zcdc="$zcd.zwc"
  # Compile the completion dump to increase startup speed, if dump is newer or doesn't exist,
  # in the background as this is doesn't affect the current session
  # if [[ -f "$zcd"(#qN.m+1) ]]; then
  #       compinit -i -d "$zcd"
  #       { rm -f "$zcdc" && zcompile "$zcd" } &!
  # else
  #       compinit -C -d "$zcd"
  #       { [[ ! -f "$zcdc" || "$zcd" -nt "$zcdc" ]] && rm -f "$zcdc" && zcompile "$zcd" } &!
  # fi
  compinit
}

autoload bashcompinit
bashcompinit
_zpcompinit_custom


# Group matches and describe.
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes

# Expansion options
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}' 'l:|=* r:|=*' 'r:|[._-]=** r:|=**'
zstyle ':completion::prefix-1:*' completer _complete
zstyle ':completion:incremental:*' completer _complete _correct
zstyle ':completion:predict:*' completer _complete
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# Increase the number of errors based on the length of the typed word.
zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'

# Don't complete unavailable commands.
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

# Array completion element sorting.
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

zstyle ':completion:*' group-name ''
zstyle ':completion:*:complete:mpv:*' tag-order '!urls'
zstyle ':completion:*:complete:mplayer:*' tag-order '!urls'
zstyle ':completion:*:complete:vlc:*' tag-order '!urls'

zstyle ':completion:*:ssh:*' hosts $hosts
zstyle ':completion:*:slogin:*' hosts $hosts

# Completion caching
zstyle ':completion::complete:*' use-cache 1
zstyle ':completion::complete:*' cache-path ~/.zsh/cache/$HOST

# Expand partial paths
zstyle ':completion:*' expand 'yes'

# Directories
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*' squeeze-slashes true

# History
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

# Include non-hidden directories in globbed file completions
# for certain commands

zstyle ':completion::complete:*' '\'

# tag-order 'globbed-files directories' all-files
zstyle ':completion::complete:*:tar:directories' file-patterns '*~.*(-/)'

# Don't complete backup files as executables
zstyle ':completion:*:complete:-command-::commands' ignored-patterns '*\~'

# Don't complete files that vim shouldn't handle
zstyle ':completion:*:*:(vi|vim|nvim|vimdiff):*:*' ignored-patterns '*?.pyc' \
    '*?.pyo' '*?.pdf' '*?.o'
# zstyle ':completion:*:*:(vi|vim|nvim|vimdiff):*:directories' ignored-patterns \
#     '(*/)*.egg-info'

# Ignore these everywhere except for rm
zstyle ':completion:*:*:*' ignored-patterns '(|*/)__pycache__' \
    '(|*/)*.egg-info' '(*/)#lost+found'
zstyle ':completion:*:rm:*' ignored-patterns

# Ignore completion functions
zstyle ':completion:*:functions' ignored-patterns '_*'

# Ignore what's already in the line
# With commands like `rm/kill/diff' it's annoying if one gets offered the same
# filename again even if it is already on the command line. To avoid that:
zstyle ':completion:*:(rm|kill|diff):*' ignore-line yes

# Ignore parent directory
# Useful for cd, mv and cp. Ex, cd will never select the parent directory (ie
# cd ../<TAB>):
zstyle ':completion:*:(cd|mv|cp):*' ignore-parents parent pwd

# Separate matches into groups
zstyle ':completion:*:matches' group 'yes'

# Describe each match group.
zstyle ':completion:*:descriptions' format "%B---- %d%b"

# Messages/warnings format
zstyle ':completion:*:messages' format '%B%U---- %d%u%b'
zstyle ':completion:*:warnings' format '%B%U---- no match for: %d%u%b'

# Describe options in full
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'

zstyle ':completion:*' rehash true
zstyle ':completion:*' menu select=2

# start menu completion only if it could find no unambiguous initial string
zstyle ':completion:*:correct:*'       insert-unambiguous true
zstyle ':completion:*:man:*'      menu yes select
# activate menu
zstyle ':completion:*:history-words'   menu yes                            
# complete 'cd -<tab>' with menu
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select              
zstyle ':completion:*' menu select=5

# No shared history between tabs
unsetopt sharehistory

# Disabled syntax highlighting because it is not compatible with jetbrains
# terminals. It makes the caret/cursor invisible during movement.
# /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh \
for i in \
    /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh \
; do
    if [ -e "$i" ]; then
        source "$i"
    fi
done

export ZSH_AUTOSUGGEST_MANUAL_REBIND=true
export ZSH_AUTOSUGGEST_USE_ASYNC=true
export ZSH_AUTOSUGGEST_STRATEGY=(history)
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20

if [ -d ~/.zsh/plugins/ ]; then
    for f in ~/.zsh/plugins/*sh; do
        . "$f"
    done
fi


# added by travis gem
[ -f /Users/rick/.travis/travis.sh ] && source /Users/rick/.travis/travis.sh

function init_fzf(){
    fzf-history-widget-accept() {
        local selected num
        setopt localoptions noglobsubst pipefail 2> /dev/null
        # selected=( $(fc -l 1 | eval "$(__fzfcmd) +s --tac +m -n2..,.. --tiebreak=index --toggle-sort=ctrl-r $FZF_CTRL_R_OPTS -q ${(q)LBUFFER}") )
        selected=( $(fc -l 1 | eval "$(__fzfcmd) +s --tac +m -n2..,.. --tiebreak=index --toggle-sort=ctrl-r --expect=tab,ctrl-e,left,right $FZF_CTRL_R_OPTS -q ${(q)LBUFFER}") )

        local ret=$?
        if [ -n "$selected" ]; then
            local accept=1
            local edit=0
            if [[ $selected[1] = tab || $selected[1] = left || $selected[1] = right ]]; then
                accept=0
                shift selected
            elif [[ $selected[1] = ctrl-e ]]; then
                edit=1
                shift selected
            fi

            num=$selected[1]
            if [ -n "$num" ]; then
                zle vi-fetch-history -n $num
                [[ $accept = 1 ]] && zle accept-line
                [[ $edit = 1 ]] && zle edit-command-line
            fi
        fi
        zle redisplay
        typeset -f zle-line-init >/dev/null && zle zle-line-init
        return $ret
    }
    zle     -N      fzf-history-widget-accept
    bindkey '^R'    fzf-history-widget-accept

    if command_exists pt; then
        export FZF_DEFAULT_COMMAND='pt --global-gitignore -g ""'
    elif command_exists ag; then
        export FZF_DEFAULT_COMMAND='ag --follow -g "" . site-packages '
    fi
    export FZF_DEFAULT_OPTS='--no-mouse'
}


if [ -f ~/.fzf.zsh ]; then
    source ~/.fzf.zsh
    init_fzf
elif [ -f /usr/local/share/examples/fzf/shell/completion.zsh ]; then
    source /usr/local/share/examples/fzf/shell/completion.zsh
    source /usr/local/share/examples/fzf/shell/key-bindings.zsh
    init_fzf
fi

test -f "${ROOT_DIR}.zshrc_local" && source "${ROOT_DIR}.zshrc_local"
test -f "${ROOT_DIR}.zshrc.local" && source "${ROOT_DIR}.zshrc.local"

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

###-begin-pm2-completion-###
### credits to npm for the completion file model
#
# Installation: pm2 completion >> ~/.bashrc  (or ~/.zshrc)
#

COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}
COMP_WORDBREAKS=${COMP_WORDBREAKS/@/}
export COMP_WORDBREAKS

if type complete &>/dev/null; then
  _pm2_completion () {
    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           pm2 completion -- "${COMP_WORDS[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -o default -F _pm2_completion pm2
elif type compctl &>/dev/null; then
  _pm2_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       pm2 completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _pm2_completion + -f + pm2
fi
###-end-pm2-completion-###

export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
export PATH="/usr/local/opt/helm@2/bin:$PATH"
export PATH="/usr/local/opt/helm@2/bin:$PATH"

if [ 1 -eq "$DEBUG" ]; then
    # turn off tracing
    unsetopt xtrace
    # restore stderr to the value saved in FD 3
    exec 2>&3 3>&-
    zprof
fi

fpath+=~/.zfunc

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/rick/opt/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/rick/opt/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/rick/opt/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/rick/opt/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

